# -*- coding: utf-8 -*-
from mq import *
from sys import stderr
from threading import Lock
import sys, time, os, traceback, thread
import RPi.GPIO as GPIO    
from re import findall
from subprocess import check_output   

controlPin = 14                         # Пин отвечающий за управление
pinState = False
dopPinState = False  
myCmd0 = 'echo 130 | nc -w1 -u -b 192.168.5.255 11111'
myCmd1 = 'echo 131 | nc -w1 -u -b 192.168.5.255 11111'
myCmd2 = 'echo 132 | nc -w1 -u -b 192.168.5.255 11111'
myCmd3 = 'echo 133 | nc -w1 -u -b 192.168.5.255 11111'   
def myFunc():
	if mq4.val["LPG4"] > 5:
                if pinState == False:
                        pinState = True
                        GPIO.output(controlPin, pinState) 
                os.system(myCmd0)
        if mq5.val["LPG5"] > 3:
                 os.system(myCmd1)
        if mq6.val["LPG6"] > 5:
                 os.system(myCmd2)
        if mq9.val["LPG9"] > 10:
                os.system(myCmd3)
try:
    lock = Lock()
    print("Press CTRL+C to abort.")	    
    mq4 = MQ(10, 0, 4)
    mq5 = MQ(10, 1, 5)
    mq6 = MQ(10, 2, 6)
    mq9 = MQ(10, 3, 9)
    GPIO.setmode(GPIO.BCM)                 
    GPIO.setup(controlPin, GPIO.OUT, initial=0)
    while True:
	try:
        	perc4 = thread.start_new_thread(mq4.MQPercentage, ())
		perc5 = thread.start_new_thread(mq5.MQPercentage, ())
		perc6 = thread.start_new_thread(mq6.MQPercentage, ())
		perc9 = thread.start_new_thread(mq9.MQPercentage, ())
	except:
		sys.stdout.write("Thread Error")
	sys.stdout.write("\r")
        sys.stdout.write("\033[K")	
	sys.stdout.write("LPG4: %g ppm ; LPG5: %g ppm ; LPG6: %g ppm ; LPG9: %g ppm " % (mq4.val["LPG4"], mq5.val["LPG5"], mq6.val["LPG6"], mq9.val["LPG9"])),
	sys.stdout.flush()
	try:
	thread.start_new_thread(myFunc, ()
)

except Exception as e:
    	GPIO.cleanup()
	print("\nAbort by user", e)
    
